// Description: Sort all created cartographic samples by all ratios
// Copyright (c) 2010 - 2011
// Tomas Bayer
// Charles University in Prague, Faculty of Science
// bayertom@natur.cuni.cz

// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.

#ifndef sortSamplesByAllRatios_H
#define sortSamplesByAllRatios_H

#include "libalgo/source/algorithms/cartanalysis/CartAnalysis.h"

//Forward declaration
template <class T>
class Sample;

//Sorter of the cartographic samples by all ratios
class sortSamplesByAllRatios
{
        private:
                TAnalysisParameters::TAnalysisType analysis_type;

        public:
                sortSamplesByAllRatios ( const TAnalysisParameters::TAnalysisType & analysis_type_ ) : analysis_type ( analysis_type_ ) {}

                template <typename T>
                bool operator() ( const Sample <T> &s1, const Sample <T> &s2 ) const
                {
                        //Compare average of positions relative to all criteria using arithmetic mean
                        unsigned int n1 = 0, n2 = 0;

                        return	( s1.getCrossNearestNeighbourDistanceRatioPosition() * analysis_type.a_cnd * ( s1.getCrossNearestNeighbourDistanceRatio() >= 0 ? 1 && ++n1 : 0 ) +
                                  s1.getHomotheticTransformationRatioPosition() * analysis_type.a_homt * ( s1.getHomotheticTransformationRatio() >= 0 ? 1 && ++n1 : 0 ) +
                                  s1.getHelmertTransformationRatioPosition() * analysis_type.a_helt * ( s1.getHelmertTransformationRatio() >= 0 ? 1 && ++n1 : 0 ) +
                                  s1.getGNTurningFunctionRatioPosition() * analysis_type.a_gn_tf * ( s1.getGNTurningFunctionRatio() >= 0 ? 1 && ++n1 : 0 ) /*+                                  
				  s1.getVoronoiCellTurningFunctionRatioPosition() * analysis_type.a_vd_tf * ( s1.getVoronoiCellTurningFunctionRatio() >= 0 ? 1 && ++n1 : 0 )*/ ) 
				  / ( double ) n1

                                <

                                ( s2.getCrossNearestNeighbourDistanceRatioPosition() * analysis_type.a_cnd * ( s2.getCrossNearestNeighbourDistanceRatio() >= 0 ? 1 && ++n2 : 0 ) +
                                  s2.getHomotheticTransformationRatioPosition() * analysis_type.a_homt * ( s2.getHomotheticTransformationRatio() >= 0 ? 1 && ++n2 : 0 ) +
                                  s2.getHelmertTransformationRatioPosition() * analysis_type.a_helt * ( s2.getHelmertTransformationRatio() >= 0 ? 1 && ++n2 : 0 ) +
                                  s2.getGNTurningFunctionRatioPosition() * analysis_type.a_gn_tf * ( s2.getGNTurningFunctionRatio() >= 0 ? 1 && ++n2 : 0 ) /*+
                                  s2.getVoronoiCellTurningFunctionRatioPosition() * analysis_type.a_vd_tf * ( s2.getVoronoiCellTurningFunctionRatio() >= 0 ? 1 && ++n2 : 0 )*/ ) 
				  / ( double ) n2;
                }
};

#endif
