#include "File.h"

#include <fstream>
#include <iostream>
#include <stdio.h>
#include <ctype.h>

#include "libalgo/source/const/Const.h"
#include "libalgo/source/exceptions/ErrorBadData.h"
#include "libalgo/source/exceptions/ErrorFileRead.h"


TFileLines File::loadFileToLines ( const char * file_name )
{
        //Load projection from file
        char buffer[BUFF];
        FILE * file = NULL;
        TFileLines file_lines;

        try
        {
                //Try to open file
                file = fopen ( file_name, "r" );

                if ( file != NULL )
                {
                        //Process all lines
                        for ( ; fgets ( buffer, BUFF, file ); )
                        {
                                //Remove empty lines
                                char word[BUFF];
                                unsigned int j = 0;

                                for ( unsigned i = 0; i < strlen ( buffer ); i++ )
                                {
                                        //Are there other chars?
                                        if ( !isspace ( ( unsigned char ) buffer[i] ) )
                                        {
                                                word[j++] = buffer[i];
                                        }
                                }

                                //Terminate word
                                word[j] = '\0';

                                //Add non empty line to the list
                                if ( j > 0 )
                                {
                                        file_lines.push_back ( word );
                                }
                        }

                        //Close file
                        fclose ( file );
                }

                //File could not be opened
                else
                {
                        //Throw exception
                        throw ErrorFileRead ( "EFileReadError: can not open file, ", file_name );
                }
        }

        //Any error has appeared
        catch ( std::ios_base::failure & )
        {
                //Close file
                fclose ( file );

                //Throw exception
                throw ErrorFileRead ( "EFileReadError: can not read file, ", file_name );
        }

        //Return content of the file
        return file_lines;
}


TFileWords File::loadFileToWords ( const char * file_name )
{
        //Load projection from file
        unsigned int lines = 0;
        char buffer[BUFF];
        FILE * file;
        TFileWords file_words;
        TFileLines file_lines;

        //Clear lines and words
        file_lines.clear();
        file_words.clear();

        try
        {
                //Try to open file
                file = fopen ( file_name, "r" );

                if ( file != NULL )
                {
                        //Process all lines
                        for ( ; fgets ( buffer, BUFF, file ); )
                        {
                                //Remove empty lines
                                bool empty_line = true;

                                for ( unsigned i = 0; i < strlen ( buffer ); i++ )
                                {
                                        //Are there other chars?
                                        if ( !isspace ( ( unsigned char ) buffer[i] ) )
                                        {
                                                //Line not empty
                                                empty_line = false;
                                                break;
                                        }
                                }

                                //Add non empty line to the list
                                if ( !empty_line )
                                {
                                        file_lines.push_back ( buffer );
                                        lines++;
                                }
                        }

                        //Resize words
                        file_words.resize ( lines + 1 );

                        // delimit lines to words and join words
                        for ( unsigned int i = 0; i < lines; i++ )
                        {
                                //Delimit each line to the char
                                char * word = strtok ( const_cast<char *> ( file_lines[i].c_str() ), " \t,;\r\n" );

                                //Process each line
                                for ( int j = 0; word; j++, word = strtok ( 0, " \t;\r\n" ) )
                                {
                                        //Add word to the list
                                        file_words[i].push_back ( word );
                                }
                        }

                        //Close file
                        fclose ( file );
                }

                //File could not be opened
                else
                {
                        //Throw exception
                        throw ErrorFileRead ( "EFileReadError: can not open file, ", file_name );
                }
        }

        //Any error has appeared
        catch ( std::ios_base::failure & )
        {
                //Close file
                fclose ( file );

                //Throw exception
                throw ErrorFileRead ( "EFileReadError: can not read file", file_name );
        }

        //Return content of the file
        return file_words;
}
