// Description: Performs cartometric analysis (i.e. detection of the cartographic projection)

// Copyright (c) 2010 - 2011
// Tomas Bayer
// Charles University in Prague, Faculty of Science
// bayertom@natur.cuni.cz

// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.

#ifndef CartAnalysis_H
#define CartAnalysis_H

#include "libalgo/source/structures/list/Container.h"

//Forward declarations
template <typename T >
class Node3DCartesian;

template <typename T >
class Node3DCartesianProjected;

template <typename T >
class Point3DGeographic;

template <typename T>
class ProjectionLimits;

template <typename T >
class Sample;

template <typename T >
struct TRansacResults;

template <typename T >
struct TMeridiansList;

template <typename T >
struct TParallelsList;

class sortSamplesByAllRatios;

//Information which cartometric analysis will be performed
struct TAnalysis
{
        bool a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;

        TAnalysis () :  a1 ( false ), a2 ( false ), a3 ( false ), a4 ( false ), a5 ( false ),
                a6 ( false ), a7 ( false ), a8 ( false ), a9 ( false ), a10 ( false ), a11 ( false ) {}

        TAnalysis ( const bool status ) :  a1 ( status ), a2 ( status ), a3 ( status ), a4 ( status ), a5 ( status ),
                a6 ( status ), a7 ( status ), a8 ( status ), a9 ( status ), a10 ( status ), a11 ( status ) {}
};


//Cartometric analysis
class CartAnalysis
{
        public:
                template <typename T>
                static void ComputeAnalysisForAllSamples ( Container <Sample <T> *> *sl, Container <ProjectionLimits <T> *> *pl, Container <Node3DCartesian <T> *> *nl_test, Container <Point3DGeographic <T> *> *pl_reference,
                                typename TMeridiansList <T> ::Type * meridians, typename TParallelsList <T> ::Type * parallels, const Container <Face <T> *> *faces_test, const Projection <T> *analyzed_proj,
                                TAnalysis & analysis, const T lat_step, const T lon_step, const T lat0_step, const bool analyze_oblique_position, unsigned int & total_created_samples,
                                const bool print_exception  = true, std::ostream * output = &std::cout );

                template <typename T>
                static void printResults ( const Container <Sample <T> *> *sl, unsigned int items_printed, const TAnalysis & analysis, const Projection <T> *analyzed_proj, std::ostream * output =&std::cout );

                template <typename T>
                static void sortSamplesByComputedRatios ( Container <Sample <T> *> *sl, const TAnalysis & analysis );

                template <typename T>
                static void setPositionForSortedSamples ( Container <Sample <T> *> *sl, const unsigned short index );

                template <typename T>
                static bool checkSample ( const typename TMeridiansList <T> ::Type * meridians, const typename TParallelsList <T> ::Type * parallels, const Container <Node3DCartesian <T> *> *nl_test,
                                          const Container <Node3DCartesianProjected <T> *> *nl_projected, const T similarity_ratio = 0.5 );

                template <typename T>
                static void analyzeSampleCrossNearestNeighbourDistance ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test, const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );

                template <typename T>
                static void analyzeSampleAverageNearestNeighbourDistance ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );

                template <typename T>
                static void analyzeSampleSimilaritytransformationDeviation ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test, const  Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );

                template <typename T>
                static void analyzeSampleGeographicNetworkAngularDifference ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                const typename TMeridiansList <T> ::Type * meridians, const typename TParallelsList <T> ::Type * parallels );

                template <typename T>
                static void analyzeSampleGeographicNetworkTangentFunctionRatio ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                const typename TMeridiansList <T> ::Type * meridians, const typename TParallelsList <T> ::Type * parallels );

                template <typename T>
                static void analyzeSampleKNNGraphRatio ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );

                template <typename T>
                static void analyzeSampleNNNGraphRatio ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );


                template <typename T>
                static void analyzeSampleSphereOfInfulenceGraphRatio ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test,  const Container <Node3DCartesianProjected  <T> *> *nl_projected,
                                Container <Node3DCartesian <T> *> *nl_transformed );

                template <typename T>
                static void analyzeSampleUsingVoronoiDiagramRatio ( Sample <T> *s, const Container <Node3DCartesian <T> *> *nl_test, const Container <Node3DCartesianProjected  <T> *> *nl_projected, const Container <Face <T> *> *faces_test, TAnalysis & analysis );


        private:

                template <typename T>
                static void ComputeAnalysisForOneSample ( Container <Sample <T> *> *sl, Container <ProjectionLimits <T> *> *pl, Container <Node3DCartesian <T> *> *nl_test, Container <Point3DGeographic <T> *> *pl_reference,
                                typename TMeridiansList <T> ::Type * meridians, typename TParallelsList <T> ::Type * parallels, const Container <Face <T> *> *faces_test,
                                const Projection <T> *proj, TAnalysis & analysis, const T latp, const T lonp, const T lat0, unsigned int & created_samples_projection,
                                unsigned int & total_created_samples, const bool print_exception, std::ostream * output = & std::cout );

};

#include "CartAnalysis.hpp"

#endif
