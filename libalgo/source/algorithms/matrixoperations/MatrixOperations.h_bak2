// Description: Basic matrices operation

// Copyright (c) 2010 - 2012
// Tomas Bayer
// Charles University in Prague, Faculty of Science
// bayertom@natur.cuni.cz

// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.


#ifndef MatrixOperations_H
#define MatrixOperations_H

#include <cmath>

#include "libalgo/source/structures/matrix/Matrix.h"

#include "libalgo/source/exceptions/ErrorMathMatrixDifferentSize.h"
#include "libalgo/source/exceptions/ErrorMathMatrixSingular.h"
#include "libalgo/source/exceptions/ErrorMathMatrixSquare.h"


//Define namespace: advanced matrix operations
namespace MatrixOperations
{
        //Transpose matrix
        template <typename T>
        Matrix <T> trans ( Matrix <T> A )
        {
                //Create trans matrix
                const unsigned int m = A.rows(), n = A.cols();
                Matrix <T> A_trans ( n, m );

                //Copy m to m_trans
                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned int j = 0; j < n; j++ )
                        {
                                A_trans ( j, i ) = A ( i, j );
                        }
                }

                return A_trans;
        }


        //Find min value, row and column position
        template <typename T>
        T min ( const Matrix <T> &A, unsigned int & row, unsigned int & column )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Initialize minimum
                T min_value = A ( 0, 0 );

                //Process all items
                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned int j = 0; j < n; j++ )
                        {
                                if ( A ( i, j ) < min_value )
                                {
                                        min_value = A ( i, j );
                                        row = i; column = j;
                                }
                        }
                }

                return min_value;
        }


        //Find min value
        template <typename T>
        T min ( const Matrix <T> &A )
        {
                unsigned int row_index, column_index;
                return min ( A, row_index, column_index );
        }


        //Find max value, row and column index
        template <typename T>
        T max ( const Matrix <T> &A, unsigned int & row, unsigned int & column )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Initialize maximum
                T max_value = A ( 0, 0 );

                //Process all items
                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned int j = 0; j < n; j++ )
                        {
                                if ( A ( i, j ) > max_value )
                                {
                                        max_value = A ( i, j );
                                        row = i; column = j;
                                }
                        }
                }

                return max_value;
        }


        //Find max value
        template <typename T>
        T max ( const Matrix <T> &A )
        {
                unsigned int row_index, column_index;
                return max ( A, row_index, column_index );
        }


        //Sum selected row
        template <typename T>
        T sumRow ( const Matrix <T> &A, const unsigned int row )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Matrix row index is invalid, throw exception
                if ( row < 0 || row > m )
                {
                        throw ErrorIndexOutOfBound ( "ErrorIndexOutOfBound: ", "can not compute row sum, invalid row (row < 0 || row > rows_count)" );
                }

                T sum = 0;

                for ( unsigned int  j = 0; j < n; j++ )
                {
                        sum += A ( row, j );
                }

                return sum;
        }


        //Sum selected column
        template <typename T>
        T sumColumn ( const Matrix <T> &A, const unsigned int column )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Matrix  column index is invalid, throw exception
                if ( column < 0 || column > n )
                {
                        throw ErrorIndexOutOfBound ( "ErrorIndexOutOfBound: ", "can not compute column sum, invalid column (column < 0 || column > columns_count)" );
                }

                T sum = 0;

                for ( unsigned int  i = 0; i < m; i++ )
                {
                        sum += A ( i, column );
                }

                return sum;
        }


        //Sum of the matrix
        template <typename T>
        T sum ( const Matrix <T> &A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                T sum = 0;

                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned  int j = 0; j < n; j++ )
                        {
                                sum += A ( i, j );
                        }
                }

                return sum;
        }


        //Sum2 of the matrix
        template <typename T>
        T sum2 ( const Matrix <T> &A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                T sum = 0;

                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned  int j = 0; j < n; j++ )
                        {
                                sum += A ( i, j ) * A ( i, j );
                        }
                }

                return sum;
        }


        //Create diagonal matrix
        template <typename T>
        Matrix <T> diag ( const Matrix <T> &A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Rectangle matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not perform GEM; (rows_count, columns_count):  ", m, n );
                }

                //Create output matrix
                Matrix <T> A_diag ( m, n );

                for ( unsigned int  i = 0; i < m ; i++ )
                {
                        A_diag ( i, i ) = A ( i, i );
                }

                return A_diag;
        }


        //Gaussian elimination algorithm
        template <typename T>
        Matrix <T> gem ( Matrix <T> A, Matrix <T> B )
        {
                const unsigned int m1 = A.rows(), n1 = A.cols();
                const unsigned int m2 = B.rows(), n2 = B.cols();

                //Different rows and cols count
                if ( m1 != m2 )
                {
                        throw ErrorMathMatrixDifferentSize ( "ErrorMathMatrixDifferentSize: ", " invalid dimension of the matrices, can not perform GEM; (rows_count columns_count):  ", m1, n1, m2, n2 );
                }

                //Rectangle matrix
                if ( m1 != n1 )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not perform GEM; (rows_count, columns_count):  ", m1, n1 );
                }

                //Create matrix X
                Matrix <T> X ( m1, 1 );

                //Forward step of the Gauss elimination: convert A to triangle matrix
                Matrix <T> A_triangle ( A );
                gemForward ( A_triangle, &B );

                //Backward step of the Gaussian elimination: compute A * x = B
                gemBackward ( A_triangle, B, X );

                //Return solution
                return X;
        }


        //Gaussian elimination algorithm (Forward step for matrices A, B, reset sign in A(m-1,0) item)
        template <typename T>
        void gemForward ( Matrix <T> &A_triangle, Matrix <T> *B = NULL )
        {
                //Run Gaussian elimination, store sign in A(m, 0)
                gemForwardSign ( A_triangle, B );

                //Reset sign in A(m-1, 0)
                A_triangle ( A_triangle.rows() - 1, 0 ) = 0;
        }


        //Gauusian elimination algorithm (Forward step for matrices A, B, store sign in A(m-1,0) item)
        template <typename T>
        void gemForwardSign ( Matrix <T> &A_triangle, Matrix <T> *B = NULL )
        {
                const unsigned int m = A_triangle.rows(), n = A_triangle.cols();
                short sign = 1;

                //Create triangle matrix A_triangle from A
                for ( int k = 0; k < n; k++ )
                {
                        //Initialize index maximum item
                        unsigned int index_max = k;

                        //Find max index
                        for ( unsigned j = k + 1; j < n; j++ )
                        {
                                if ( fabs ( A_triangle ( j, k ) ) > fabs ( A_triangle ( index_max, k ) ) )
                                {
                                        //Remember index of the maximum item
                                        index_max = j;
                                }
                        }

                        //Test, if maximum index has been changed
                        if ( k != index_max )
                        {
                                //Swap rows in matrix A
                                for ( unsigned int j = k; j < n; j++ )
                                {
                                        const T pom = A_triangle ( k, j );
                                        A_triangle ( k, j ) = A_triangle ( index_max, j );
                                        A_triangle ( index_max, j ) = pom;
                                }

                                //Swap rows in matrix B
                                if ( B != NULL )
                                {
                                        const T pom = ( *B ) ( k, 0 );
                                        ( *B ) ( k, 0 ) = ( *B ) ( index_max, 0 );
                                        ( *B ) ( index_max, 0 ) = pom;
                                }

                                //Change sign
                                else
                                {
                                        sign *= -1;
                                }
                        }

                        for ( unsigned int i = k + 1;  i < n; i++ )
                        {
                                //Singularity test
                                if ( fabs ( A_triangle ( k, k ) ) > MIN_FLOAT * fabs ( A_triangle ( i, k ) ) )
                                {
                                        //Get  fraction
                                        const T item = A_triangle ( i, k ) / A_triangle ( k, k ) ;

                                        //Process row in matrix B
                                        if ( B != NULL )
                                        {
                                                ( *B ) ( i, 0 ) = ( *B ) ( i, 0 ) - item * ( *B ) ( k, 0 );
                                        }

                                        for ( int j = n - 1; j >= k; j-- )
                                        {
                                                A_triangle ( i, j ) = A_triangle ( i, j ) - item * A_triangle ( k , j );
                                        }
                                }

                                //Throw exception
                                else
                                {
                                        throw ErrorMathMatrixSingular ( "ErrorMathMatrixSingular: ", " singular matrix, cannot perform GEM (forward); (rows_count, columns_count):  ", A_triangle.rows(), A_triangle.cols() );
                                }
                        }

                        //Store sign into A(m,0) element
                        if ( B == NULL )
                        {
                                A_triangle ( m - 1, 0 ) = sign;
                        }
                }
        }


        //Solving of the equation (Backward step)
        template <typename T>
        void gemBackward ( Matrix <T> &A, const Matrix <T> &B, Matrix <T> &X )
        {
                const unsigned int n = A.cols();

                for ( int i = n - 1; i >= 0 ; i-- )
                {
                        T sum = 0;

                        for ( unsigned int j = i + 1; j < n; j++ )
                        {
                                sum += A ( i, j ) * X ( j, 0 );
                        }

                        sum = B ( i, 0 ) - sum;

                        //Throw exception, singular matrix
                        if ( fabs ( A ( i, i ) ) < fabs ( sum ) * MIN_FLOAT )
                        {
                                throw ErrorMathMatrixSingular ( "ErrorMathMatrixSingular: ", " singular matrix, cannot perform GEM (backward); (rows_count, columns_count):  ", A.rows(), A.cols() );
                        }

                        X ( i, 0 ) = sum / A ( i, i );
                }
        }


        //Determinant of the matrix
        template <typename T>
        T det ( Matrix <T> A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not compute determinant; (rows_count, columns_count):  ", A.rows(), A.cols() );
                }

                //Create triangle matrix
                Matrix <T>  A_tri ( A );

                //Perform GEM forward procedure (sign stored in A(m-1, 0) item)
                gemForwardSign ( A_tri );

                //Compute determinant of the triangle matrix
                T d = 1;

                for ( unsigned int i = 0; i < m; i++ )
                {
                        d *= A_tri ( i, i );
                }

                //Return determinant
                return d * A_tri ( m - 1, 0 );
        }


        //LU decomposition of the matrix
        template <typename T>
        void lu ( Matrix <T> A, Matrix <T> &L, Matrix <T> &U, Matrix <T> &P )
        {
                //LU decomposition of A, L = lower triangular matrix, U = upper triangular matrix, P = permutation matrix
                const unsigned int m = A.rows(), n = A.cols();

                //Is A rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not perform LU decomposition; (rows_count, columns_count):  ", A.rows(), A.cols() );
                }

                //set all items of L, U to zero
                for ( unsigned int i = 0; i < m; i++ )
                {
                        for ( unsigned int j = 0; j < m; j++ )
                        {
                                L ( i, j ) = 0;
                                U ( i, j ) = 0;
                        }
                }

                //LU decomposition
                for ( unsigned j = 0; j < m - 1; j++ )
                {
                        //Get current pivot
                        T current_pivot = A ( j, j );

                        //Create E matrix
                        Matrix <T> E ( m, m, 0, 1 );

                        //Find max pivot in j-column
                        unsigned int i = j + 1;
                        T max_pivot = A ( i, j );

                        i++;

                        for ( ; i < m; i++ )
                        {
                                if ( A ( i, j ) > max_pivot )
                                {
                                        max_pivot = A ( i, j );
                                }
                        }

                        //Test current pivot and max pivot
                        if ( fabs ( current_pivot ) < MIN_FLOAT )
                        {
                                //Throw exception, can not compute LU decomposition
                                if ( fabs ( max_pivot ) < MIN_FLOAT )
                                {
                                        throw ErrorMathMatrixSingular ( "ErrorMathMatrixSingular: ", " singular matrix, cannot perform LU (rows_count, columns_count).  ", A.rows(), A.cols() );
                                }

                                //Flip row
                                else
                                {
                                        flipRows ( A, L, E, j, m );
                                }
                        }

                        else
                        {
                                if ( fabs ( current_pivot ) < max_pivot )
                                {
                                        if ( fabs ( current_pivot - max_pivot ) >= MIN_FLOAT )
                                        {
                                                flipRows ( A, L, E, j, m );
                                        }
                                }
                        }

                        //Update permution matrix
                        P = P * E;

                        //Compute decomposition
                        for ( unsigned k = j + 1; k < m; k++ )
                        {
                                L ( k, j ) = A ( k, j ) / A ( j, j );
                                A ( k, j ) = 0;

                                for ( unsigned int l = j + 1; l < m; l++ )
                                {
                                        A ( k, l ) = A ( k, l ) - L ( k, j ) * A ( j, l );
                                }
                        }
                }

                //Update U and L matrices
                const Matrix <T> E2 ( m, m, 0, 1 );
                L = L + E2;
                P = trans ( P );
                U = A;
        }


        //Flip row in matrix A (LU decomposition)
        template <typename T>
        void flipRows ( Matrix <T> &A, Matrix <T> &L, Matrix <T> &E, unsigned int j, unsigned int m )
        {
                //Find max item in j-column
                unsigned int i = j;
                unsigned int index = i;

                T maxima = A ( i, j );
                i++;

                for ( ; i < m; i++ )
                {
                        if ( A ( i, j ) > maxima )
                        {
                                maxima = A ( i, j );
                                index = i;
                        }
                }

                //Increment index
                index = index + j - 1;

                //Swap rows in A: n <=> index
                Matrix <T> A_tmp ( 1, m );
                A_tmp.row ( A.row ( j ), 0 );
                A.row ( A.row ( index ), j );
                A.row ( A_tmp.row ( 0 ), index );

                //Swap rows in L: n <=> index
                Matrix <T> L_tmp ( 1, m );
                L_tmp.row ( L.row ( j ), 0 );
                L.row ( L.row ( index ), j );
                L.row ( L_tmp.row ( 0 ), index );

                //Update E (for calculation of the permutation matrix)
                for ( unsigned int k = 0; k < m; k++ )
                {
                        E ( index, k ) = 0;
                        E ( j, k ) = 0;
                }

                E ( j, index ) = 1;
                E ( index, j ) = 1;
        }


        //Inverse matrix calculation using LU decomposition
        template <typename T>
        Matrix <T> inv ( Matrix <T> A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not compute inverse matrix; (rows_count, columns_count):  " , m , n );
                }

                //Create LU decomposition
                Matrix <T> L ( m, m );
                Matrix <T> U ( m, m );
                Matrix <T> P ( m, m, 0, 1 );
                lu ( A, L, U, P );

                //Compute X = L^-1 (lower triangular matrix)
                Matrix <T> X ( m, m );

                for ( unsigned int j = 0; j < m; j++ )
                {
                        X ( j, j ) = 1 ;

                        for ( unsigned int i = j + 1; i < m; i++ )
                        {
                                T sum = 0;

                                for ( unsigned int k = j; k <= i - 1; k++ )
                                {
                                        sum -= L ( i, k ) * X ( k, j );
                                }

                                X ( i, j ) = sum;
                        }
                }

                //Compute Y = U^-1 (upper triangular matrix)
                Matrix <T> Y ( m, m );

                for ( unsigned int j = 0; j < m; j++ )
                {
                        Y ( j, j ) = 1 / U ( j, j );

                        for ( int i = j - 1; i >= 0; i-- )
                        {
                                T sum = 0;

                                for ( unsigned int k = i + 1; k <= j; k++ )
                                {
                                        sum -= U ( i, k ) * Y ( k, j ) / U ( i, i );
                                }

                                Y ( i, j ) = sum;
                        }
                }

                //Compute inverse matrix A^-1 = U^-1 * L^-1 = X * Y * P
                return Y * X * P;
        }


        //Pseudo-inverse matrix calculation using Moore - Penrose inverse
        //Algorithm by Pierre Courrieu, 2005 with the Cholesky factorization
        template <typename T>
        Matrix <T> pinv ( const Matrix <T> &A )
        {
                unsigned int m = A.rows(), n = A.cols();
                bool transpose = false;

                //Compute A*A
                Matrix <double> A2 ( std::max ( m, n ), std::min ( m, n ) );

                //Input matrix must satisfy m > n, otherwise transpose
                if ( m < n )
                {
                        A2 = A * trans ( A );
                        transpose = true;
                        n = m;
                }

                else	A2 = trans ( A ) * A;

                //Compute the tolerance
                Matrix <T> L ( A.rows(), A.cols() );
                const T eps = min ( A2 ) * 1.0e-9;

		//Compute L using the Cholesky factorization
                int j = -1;
		for ( unsigned int i = 0; i < n; i++ )
                {
                        //Increment index
                        j++;

                        //Set new matrix L
                        L.submat ( ( j == 0 ? A2 ( i, n - 1, i, i ) : A2 ( i, n - 1, i, i ) - L ( i, n - 1, 0, j - 1 ) * trans ( L ( i, i, 0, j - 1 ) ) ), i, j );

                        //Iterative computation of L matrix using Cholesky algorithm
                        if ( L ( i, j ) > eps )
                        {
                                L ( i, j ) = sqrt ( L ( i, j ) );

                                if ( i < n - 1 )
                                {
                                        L.submat ( L ( i + 1, n - 1, j, j ) / L ( i, j ), i + 1, j ) ;
                                }
                        }

                        //Decrement i
                        else i--;
                }

                //Get submatrix: first j cols of L
                const Matrix <T> L2 = L ( 0, n - 1, 0, j );

                //Compute inverse matrix M = inv ( L2'*L2 )
                const Matrix <T> M = inv ( trans ( L2 ) * L2 );

                //Compute pseudoinverse matrix using Moore - Penrose algorithm: I = A'*L2*M*M*L2'
                if ( transpose )
                        return trans ( A ) * L2 * M * M * trans ( L2 );

                //Or I = L2*M*M*L2'A'
                return L2 * M * M * trans ( L2 ) * trans ( A );
        }


        //QR decomposition of the matrix
        template <typename T>
        void qr ( const Matrix <T> &A, Matrix <T> &Q, Matrix <T> &R )
        {
                const unsigned int m = A.rows(), n = A.cols();
                T sum1, sum2;

                //Rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not perform QR decomposition; (rows_count, columns_count).  ",  A.rows(), A.cols() );
                }

                //First iteration
                Q = A;

                for ( unsigned int j = 0; j < n; j++ )
                {
                        //Normalization of the diagonal item
                        sum1 = 0;

                        for ( unsigned int l = 0; l < n; l++ )
                        {
                                sum1 += Q ( l, j ) * Q ( l, j );
                        }

                        //R matrix, diagonal item
                        R ( j, j ) = sqrt ( sum1 );

                        //Singular cols
                        if ( fabs ( R ( j, j ) ) < MIN_FLOAT )
                        {
                                throw ErrorMathMatrixSingular ( "ErrorMathMatrixSingular: ", " singular matrix, cannot QR decomposition; (rows_count, columns_count):  ",  R.rows(), R.cols() );
                        }

                        //Non singular cols, create Q matrix
                        else
                        {
                                for ( unsigned int i = 0; i <  n; i++ )
                                {
                                        Q ( i, j ) = Q ( i, j ) / R ( j, j );
                                }
                        }

                        for ( unsigned int k = j + 1; k < n; k++ )
                        {
                                //Normalization of non diagonal items
                                sum2 = 0;

                                for ( unsigned int l = 0; l < n; l++ )
                                {
                                        sum2 += Q ( l, j ) * Q ( l, k );
                                }

                                //R matrix, non diagonal item
                                R ( j, k ) = sum2;

                                //Q matrix
                                for ( unsigned int i = 0; i < n; i++ )
                                {
                                        Q ( i, k ) = Q ( i, k ) - Q ( i, j ) * R ( j, k );
                                }
                        }
                }
        }


        //Compute eigen values using LU decomposition
        template <typename T>
        Matrix <T> eigLU ( const Matrix <T> A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not compute eigenvalues; (rows_count, columns_count):  ",  A.rows(), A.cols() );
                }

                //Create empty matrix (m,m)
                Matrix <T> A1 ( m, m );

                //Create copy of the matrix
                Matrix <T> A2 ( A );

                //Assign L = E
                Matrix <T> L ( m, m, 0 );

                //Assign U = E
                Matrix <T> U ( m, m, 0 );

                //Matrix P
                Matrix <T> P ( m, m, 0, 1 );

                //Eigenvalues calculation
                T eigen_diff;

                do
                {
                        //Create LU decompoition
                        lu ( A2, L, U , P );

                        //Compute U * L
                        A2 = U * L;

                        //Accuracy calculation test
                        eigen_diff = 0;

                        for ( unsigned int i = 0; i < A2.rows(); i++ )
                        {
                                eigen_diff += fabs ( A1 ( i, i ) - A2 ( i, i ) );
                        }

                        //Assign A1 = A2
                        A1 = A2;

                } while ( eigen_diff > MAX_EIGEN_DIFF );

                //Return eigenvalues matrix
                return A2;
        }


        //Compute eigen values using QR decomposition
        template <typename T>
        Matrix <T> eigQR ( const Matrix <T> A )
        {
                const unsigned int m = A.rows(), n = A.cols();

                //Rectangular matrix
                if ( m != n )
                {
                        throw ErrorMathMatrixSquare ( "ErrorMathMatrixSquare: ", " invalid dimension of the matrix (rectangle matrix), can not perform qr decomposition; (rows_count, columns_count):  ",  A.rows(), A.cols() );
                }

                //Create empty matrix (m,m)
                Matrix <T> A1 ( m, m );

                //Create copy of the matrix
                Matrix <T> A2 ( A );

                //Assign Q = E
                Matrix <T> Q ( m, m, 1 );

                //Assign R = E
                Matrix <T> R ( m, m, 1 );

                //Eigenvalues calculation
                T eigen_diff = 0;

                do
                {
                        //QR decomposition
                        qr ( A2, Q, R );

                        //Compute R * Q
                        A2 = R * Q;

                        //Accuracy calculation test
                        eigen_diff = 0;

                        for ( unsigned int i = 0; i < A2.rows(); i++ )
                        {
                                eigen_diff += fabs ( A1 ( i, i ) - A2 ( i, i ) );
                        }

                        //Assign A1 = A2
                        A1 = A2;
                }
                while ( eigen_diff > MAX_EIGEN_DIFF );

                //Return eigenvalues matrix
                return A2;
        }
};

#endif
